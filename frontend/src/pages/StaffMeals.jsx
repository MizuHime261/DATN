import { useEffect, useState, useRef } from 'react'
import axios from 'axios'

export default function StaffMeals(){
  const [rows, setRows] = useState([])
  const [form, setForm] = useState({ 
    level_id: '1', 
    plan_date: '', 
    meal_type: 'LUNCH', 
    title: '' 
  })
  const [filters, setFilters] = useState({ level_id: '', date_from: '', date_to: '', meal_type: '' })
  const [msg, setMsg] = useState('')
  const [msgType, setMsgType] = useState('')
  const [loading, setLoading] = useState(false)
  const dateRef = useRef(null)

  // Date conversion functions
  function toIsoFromText(s){
    const m = /^\s*(\d{2})\/(\d{2})\/(\d{4})\s*$/.exec(s || '')
    return m ? `${m[3]}-${m[2]}-${m[1]}` : ''
  }
  
  function toTextFromIso(iso){
    if (!iso) return ''
    try {
      const dateStr = iso.includes('T') ? iso.split('T')[0] : iso
      const date = new Date(dateStr + 'T00:00:00.000Z')
      if (Number.isNaN(date.getTime())) return ''
      
      const day = String(date.getUTCDate()).padStart(2, '0')
      const month = String(date.getUTCMonth() + 1).padStart(2, '0')
      const year = date.getUTCFullYear()
      return `${day}/${month}/${year}`
    } catch (_err) {
      return ''
    }
  }

  async function load(){
    setLoading(true)
    try {
      const params = {}
      if (filters.level_id) params.level_id = filters.level_id
      
      const { data } = await axios.get('/api/staff/meal-plans', { params })
      
      // Filter on frontend if needed
      let filteredData = data
      if (filters.date_from) {
        filteredData = filteredData.filter(row => new Date(row.plan_date) >= new Date(filters.date_from))
      }
      if (filters.date_to) {
        filteredData = filteredData.filter(row => new Date(row.plan_date) <= new Date(filters.date_to))
      }
      if (filters.meal_type) {
        filteredData = filteredData.filter(row => row.meal_type === filters.meal_type)
      }
      
      setRows(filteredData)
    } catch (error) {
      showMessage('L·ªói khi t·∫£i d·ªØ li·ªáu', 'error')
    } finally {
      setLoading(false)
    }
  }
  
  useEffect(()=>{ load() },[])

  function showMessage(message, type = 'success') {
    setMsg(message)
    setMsgType(type)
    setTimeout(() => {
      setMsg('')
      setMsgType('')
    }, 3000)
  }

  async function save(){
    if (!form.plan_date) {
      showMessage('Vui l√≤ng ch·ªçn ng√†y', 'error')
      return
    }
    if (!form.title.trim()) {
      showMessage('Vui l√≤ng nh·∫≠p t√™n m√≥n ƒÉn', 'error')
      return
    }
    // No price validation; price is handled in invoices

    try {
      const payload = {
        ...form,
        title: form.title.trim()
      }
      
      await axios.post('/api/staff/meal-plans', payload)
      showMessage('L∆∞u su·∫•t ƒÉn th√†nh c√¥ng!', 'success')
      
      // Reset form
      setForm({ 
        level_id: '1', 
        plan_date: '', 
        meal_type: 'LUNCH', 
        title: '' 
      })
      
      await load()
    } catch (error) {
      showMessage('L∆∞u th·∫•t b·∫°i: ' + (error.response?.data?.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'), 'error')
    }
  }

  // Generate quick date options
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(today.getDate() + 1)
  const nextWeek = new Date(today)
  nextWeek.setDate(today.getDate() + 7)

  return (
    <div className="staff-meals-page">
      {/* Top Section - Create Meal Plan */}
      <div className="card mb-24">
        <div className="meal-form-header">
          <h2 className="meal-form-title">T·∫°o th·ª±c ƒë∆°n b√°n tr√∫</h2>
          <p className="meal-form-subtitle">L·∫≠p k·∫ø ho·∫°ch b·ªØa ƒÉn cho h·ªçc sinh b√°n tr√∫</p>
        </div>

        <div className="meal-form-grid">
          <div className="form-section">
            <h4 className="section-title">Th√¥ng tin c∆° b·∫£n</h4>
            <div className="form-row">
              <div className="form-field">
                <label className="field-label">C·∫•p h·ªçc</label>
                <select 
                  className="input" 
                  value={form.level_id} 
                  onChange={e=>setForm(f=>({...f, level_id:e.target.value}))}
                >
                  <option value="1">Ti·ªÉu h·ªçc</option>
                  <option value="2">THCS</option>
                  <option value="3">THPT</option>
                </select>
              </div>
              
              <div className="form-field">
                <label className="field-label">Ng√†y ph·ª•c v·ª•</label>
                <div className="date-input-wrapper">
                  <input 
                    ref={dateRef}
                    type="date" 
                    className="input date-input" 
                    value={form.plan_date} 
                    onChange={e=>setForm(f=>({...f, plan_date: e.target.value}))}
                  />
                  <div className="date-display">
                    {form.plan_date ? toTextFromIso(form.plan_date) : 'Ch·ªçn ng√†y ph·ª•c v·ª•'}
                  </div>
                </div>
                <div className="quick-date-buttons">
                  <button 
                    type="button" 
                    className="btn-quick-date"
                    onClick={() => setForm(f=>({...f, plan_date: today.toISOString().split('T')[0]}))}
                  >
                    H√¥m nay
                  </button>
                  <button 
                    type="button" 
                    className="btn-quick-date"
                    onClick={() => setForm(f=>({...f, plan_date: tomorrow.toISOString().split('T')[0]}))}
                  >
                    Ng√†y mai
                  </button>
                </div>
              </div>

              <div className="form-field">
                <label className="field-label">Lo·∫°i b·ªØa ƒÉn</label>
                <select 
                  className="input" 
                  value={form.meal_type} 
                  onChange={e=>setForm(f=>({...f, meal_type:e.target.value}))}
                >
                  <option value="BREAKFAST">üåÖ B·ªØa s√°ng</option>
                  <option value="LUNCH">üçΩÔ∏è B·ªØa tr∆∞a</option>
                  <option value="DINNER">üåô B·ªØa t·ªëi</option>
                  <option value="SNACK">üç™ B·ªØa ph·ª•</option>
                </select>
              </div>
            </div>
          </div>

          <div className="form-section">
            <h4 className="section-title">Chi ti·∫øt th·ª±c ƒë∆°n</h4>
            <div className="form-row">
              <div className="form-field form-field-wide">
                <label className="field-label">T√™n m√≥n ƒÉn / Th·ª±c ƒë∆°n</label>
                <input 
                  className="input" 
                  placeholder="VD: C∆°m g√† x·ªëi m·ª°, canh chua c√° l√≥c, rau mu·ªëng lu·ªôc..." 
                  value={form.title} 
                  onChange={e=>setForm(f=>({...f, title:e.target.value}))} 
                />
              </div>
              
              {/* Gi√° ti·ªÅn b·ªè kh·ªèi form; ƒë∆∞·ª£c t·∫°o ·ªü h√≥a ƒë∆°n */}
            </div>
          </div>
        </div>

        <div className="form-actions">
          <button className="btn btn-primary btn-save-meal" onClick={save}>
            üçΩÔ∏è L∆∞u th·ª±c ƒë∆°n
          </button>
        </div>
        
        {msg && (
          <div className={`meal-message ${msgType === 'error' ? 'meal-message-error' : 'meal-message-success'}`}>
            {msg}
          </div>
        )}
      </div>

      {/* Bottom Section - Meal Plans List */}
      <div className="card">
            <div className="meal-list-header">
          <h3 className="meal-list-title">Danh s√°ch th·ª±c ƒë∆°n</h3>
          <div className="meal-filters">
            <select 
              className="input filter-input" 
              value={filters.level_id} 
              onChange={e=>setFilters(f=>({...f, level_id:e.target.value}))}
            >
              <option value="">T·∫•t c·∫£ c·∫•p h·ªçc</option>
              <option value="1">Ti·ªÉu h·ªçc</option>
              <option value="2">THCS</option>
              <option value="3">THPT</option>
            </select>
            <select 
              className="input filter-input" 
              value={filters.meal_type} 
              onChange={e=>setFilters(f=>({...f, meal_type:e.target.value}))}
            >
              <option value="">T·∫•t c·∫£ b·ªØa ƒÉn</option>
              <option value="BREAKFAST">B·ªØa s√°ng</option>
              <option value="LUNCH">B·ªØa tr∆∞a</option>
              <option value="DINNER">B·ªØa t·ªëi</option>
              <option value="SNACK">B·ªØa ph·ª•</option>
            </select>
            <input 
              type="date" 
              className="input filter-input" 
              placeholder="T·ª´ ng√†y"
              value={filters.date_from}
              onChange={e=>setFilters(f=>({...f, date_from:e.target.value}))}
            />
            <input 
              type="date" 
              className="input filter-input" 
              placeholder="ƒê·∫øn ng√†y"
              value={filters.date_to}
              onChange={e=>setFilters(f=>({...f, date_to:e.target.value}))}
            />
            <button className="btn btn-search" onClick={load}>
              üîç L·ªçc
            </button>
          </div>
        </div>

        <div className="meal-list-content">
          {loading ? (
            <div className="loading-state">
              <div className="loading-spinner"></div>
              <p>ƒêang t·∫£i danh s√°ch th·ª±c ƒë∆°n...</p>
            </div>
          ) : rows.length === 0 ? (
            <div className="empty-state">
              <div className="empty-icon">üçΩÔ∏è</div>
              <h4>Ch∆∞a c√≥ th·ª±c ƒë∆°n n√†o</h4>
              <p>T·∫°o th·ª±c ƒë∆°n m·ªõi b·∫±ng form ph√≠a tr√™n</p>
            </div>
          ) : (
            <div className="meal-table-wrapper">
              <table className="meal-table">
                <thead>
                  <tr>
                    <th>Ng√†y ph·ª•c v·ª•</th>
                    <th>B·ªØa ƒÉn</th>
                    <th>Th·ª±c ƒë∆°n</th>
                    {/* ·∫®n gi√° ti·ªÅn; ch·ªâ hi·ªÉn th·ªã c·∫•p h·ªçc */}
                    <th>C·∫•p h·ªçc</th>
                    <th>Thao t√°c</th>
                  </tr>
                </thead>
                <tbody>
                  {rows.map(r => (
                    <tr key={`${r.level_id}-${r.plan_date}-${r.meal_type}`} className="meal-row">
                      <td className="meal-date">
                        {toTextFromIso(r.plan_date)}
                      </td>
                      <td>
                        <span className={`meal-type-badge meal-type-${r.meal_type.toLowerCase()}`}>
                          {r.meal_type === 'BREAKFAST' ? 'üåÖ S√°ng' :
                           r.meal_type === 'LUNCH' ? 'üçΩÔ∏è Tr∆∞a' :
                           r.meal_type === 'DINNER' ? 'üåô T·ªëi' :
                           r.meal_type === 'SNACK' ? 'üç™ Ph·ª•' : r.meal_type}
                        </span>
                      </td>
                      <td className="meal-title">{r.title}</td>
                      <td className="meal-school">C·∫•p {r.level_id}</td>
                      <td>
                        <button 
                          className="btn btn-edit" 
                          onClick={() => {
                            setForm({
                              level_id: r.level_id,
                              plan_date: r.plan_date,
                              meal_type: r.meal_type,
                              title: r.title,
                              
                            })
                          }}
                          title="Ch·ªânh s·ª≠a"
                        >
                          ‚úèÔ∏è
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}



